{
	"info": {
		"_postman_id": "46ac2743-b8db-41f3-914b-0f1e3cc0d7ce",
		"name": "FakeRESTApi.Web V1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33071978"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "Activities",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "/api/v1/Activities/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test('Response has the required fields', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
															"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
															"    pm.expect(responseData.dueDate).to.exist.and.to.be.a('string');",
															"    pm.expect(responseData.completed).to.exist.and.to.be.a('boolean');",
															"})",
															"",
															"pm.test('Verify that the \\'id\\' is a non-negative integer', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.id).to.be.a('number');",
															"    pm.expect(responseData.id).to.be.at.least(0);",
															"})",
															"",
															"pm.test('Verify that the title is a non-empty string', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Activities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Activities/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Activities",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"dueDate\": \"<dateTime>\",\n  \"completed\": \"<boolean>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/Activities/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"})",
															"",
															"pm.test('Response has the required fields', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist;",
															"    pm.expect(responseData.title).to.exist;",
															"    pm.expect(responseData.dueDate).to.exist;",
															"    pm.expect(responseData.completed).to.exist;",
															"})",
															"",
															"pm.test('Title is a non-empty string', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Title should not be empty');",
															"})",
															"",
															"pm.test('Completed is a boolean value', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.completed).to.be.a('boolean');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 1,\n    \"title\": \"Activity 1\",\n    \"dueDate\": \"2024-05-07T06:38:19.5618532+00:00\",\n    \"completed\": true\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Activities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; v=1.0"
															},
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"dueDate\": \"<dateTime>\",\n  \"completed\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/Activities/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Activities",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"dueDate\": \"<dateTime>\",\n  \"completed\": \"<boolean>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/Activities/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200(Failed)', function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Activities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Activities/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Activities",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/api/v1/Activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Title is a non-empty string', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function (activity) {",
													"        pm.expect(activity.title).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
													"    });",
													"})",
													"",
													"pm.test('Completed is a boolean value', function () {",
													"    const responseData = pm.response.json();",
													"    responseData.forEach(function (activity) {",
													"        pm.expect(activity.completed).to.be.a('boolean');",
													"    });",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/Activities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Activities"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Activities"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"dueDate\": \"<dateTime>\",\n    \"completed\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"dueDate\": \"<dateTime>\",\n    \"completed\": \"<boolean>\"\n  }\n]"
										}
									]
								},
								{
									"name": "/api/v1/Activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Response has the required fields', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.dueDate).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.completed).to.exist.and.to.be.a('boolean');",
													"})",
													"",
													"pm.test('Id should be a non-negative integer', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy(id => id >= 0, 'Id should be a non-negative integer');",
													"})",
													"",
													"pm.test('Title is a non-empty string', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; v=1.0"
											},
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 1,\n    \"title\": \"Activity 1\",\n    \"dueDate\": \"2024-05-07T06:38:19.5618532+00:00\",\n    \"completed\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/Activities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Activities"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"dueDate\": \"<dateTime>\",\n  \"completed\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Activities"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"dueDate\": \"<dateTime>\",\n  \"completed\": \"<boolean>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Authors",
							"item": [
								{
									"name": "authors",
									"item": [
										{
											"name": "books",
											"item": [
												{
													"name": "{idBook}",
													"item": [
														{
															"name": "/api/v1/Authors/authors/books/:idBook",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Response status code is 200\", function () {",
																			"  pm.expect(pm.response.code).to.equal(200);",
																			"});",
																			"",
																			"",
																			"pm.test(\"Verify that the 'id' and 'idBook' are non-negative integers\", function () {",
																			"  const responseData = pm.response.json();",
																			"  ",
																			"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
																			"  ",
																			"  responseData.forEach(function(item) {",
																			"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
																			"    pm.expect(item.idBook).to.be.a('number').and.to.be.at.least(0);",
																			"  });",
																			"});",
																			"",
																			"",
																			"pm.test(\"Verify that firstName and lastName are non-empty strings\", function () {",
																			"  const responseData = pm.response.json();",
																			"  ",
																			"  pm.expect(responseData).to.be.an('array');",
																			"  ",
																			"  responseData.forEach(function (author) {",
																			"    pm.expect(author.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1);",
																			"    pm.expect(author.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1);",
																			"  });",
																			"});",
																			"",
																			"",
																			"pm.test(\"Response time is less than 500ms\", function () {",
																			"  pm.expect(pm.response.responseTime).to.be.below(500);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain; v=1.0"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/Authors/authors/books/:idBook",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"Authors",
																		"authors",
																		"books",
																		":idBook"
																	],
																	"variable": [
																		{
																			"key": "idBook",
																			"value": "1",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Success",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain; v=1.0"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v1/Authors/authors/books/:idBook",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v1",
																				"Authors",
																				"authors",
																				"books",
																				":idBook"
																			],
																			"variable": [
																				{
																					"key": "idBook"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; v=1.0"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n  }\n]"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "/api/v1/Authors/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"    const responseData = pm.response.json();",
															"",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('id');",
															"    pm.expect(responseData).to.have.property('idBook');",
															"    pm.expect(responseData).to.have.property('firstName');",
															"    pm.expect(responseData).to.have.property('lastName');",
															"});",
															"",
															"",
															"pm.test(\"id is a non-negative integer\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.id).to.be.a('number');",
															"    pm.expect(responseData.id).to.be.at.least(0);",
															"});",
															"",
															"",
															"pm.test(\"idBook is a non-negative integer\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.idBook).to.be.a('number');",
															"  pm.expect(responseData.idBook).to.be.at.least(0);",
															"});",
															"",
															"",
															"pm.test(\"firstName is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"",
															"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Authors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Authors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Authors/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Authors",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/Authors/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist;",
															"    pm.expect(responseData.idBook).to.exist;",
															"    pm.expect(responseData.firstName).to.exist;",
															"    pm.expect(responseData.lastName).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"The id must be a non-negative integer\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.id).to.exist;",
															"    pm.expect(responseData.id).to.be.a('number');",
															"    pm.expect(responseData.id).to.be.at.least(0);",
															"});",
															"",
															"",
															"pm.test(\"idBook is a non-negative integer\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData.idBook).to.be.a('number');",
															"  pm.expect(responseData.idBook).to.be.at.least(0);",
															"});",
															"",
															"",
															"pm.test(\"firstName is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 1,\n    \"idBook\": 1,\n    \"firstName\": \"Firs Name 1\",\n    \"lastName\": \"Last Name 1\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Authors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Authors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; v=1.0"
															},
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/Authors/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Authors",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/Authors/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Authors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Authors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Authors/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Authors",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/api/v1/Authors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    ",
													"    responseData.forEach(function(author) {",
													"        pm.expect(author).to.have.property('id');",
													"        pm.expect(author).to.have.property('idBook');",
													"        pm.expect(author).to.have.property('firstName');",
													"        pm.expect(author).to.have.property('lastName');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"The id must be a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    ",
													"    responseData.forEach(function(author) {",
													"        pm.expect(author.id).to.be.a('number');",
													"        pm.expect(author.id).to.be.at.least(0);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"idBook should be a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array');",
													"",
													"    responseData.forEach(function(author) {",
													"        pm.expect(author.idBook).to.be.a('number').and.to.be.at.least(0);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"First name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function(author) {",
													"        pm.expect(author.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/Authors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Authors"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Authors",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Authors"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "/api/v1/Authors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Response status code is 200', function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test('Response has the required fields', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('idBook');",
													"    pm.expect(responseData).to.have.property('firstName');",
													"    pm.expect(responseData).to.have.property('lastName');",
													"})",
													"",
													"pm.test('Id and idBook are non-negative integers', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, 'Id should be a non-negative integer');",
													"    pm.expect(responseData.idBook).to.be.a('number').and.to.be.at.least(0, 'idBook should be a non-negative integer');",
													"})",
													"",
													"pm.test('First Name should be a non-empty string', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
													"})",
													"",
													"pm.test('Last Name should be a non-empty string', function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; v=1.0"
											},
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 1,\n    \"idBook\": 1,\n    \"firstName\": \"First Name 1\",\n    \"lastName\": \"Last Name 1\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/Authors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Authors"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Authors",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Authors"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Books",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "/api/v1/Books/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test('Response has required fields', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist;",
															"    pm.expect(responseData.title).to.exist;",
															"    pm.expect(responseData.description).to.exist;",
															"    pm.expect(responseData.pageCount).to.exist;",
															"    pm.expect(responseData.excerpt).to.exist;",
															"    pm.expect(responseData.publishDate).to.exist;",
															"})",
															"",
															"pm.test('Id is a non-negative integer', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
															"    pm.expect(responseData.id).to.be.at.least(0, 'Id should be a non-negative integer');",
															"})",
															"",
															"pm.test('PageCount is a non-negative integer', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.pageCount).to.be.a('number');",
															"    pm.expect(responseData.pageCount).to.be.at.least(0, 'PageCount should be a non-negative integer');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Books/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Books",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Books/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Books",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"description\": \"<string>\",\n  \"pageCount\": \"<integer>\",\n  \"excerpt\": \"<string>\",\n  \"publishDate\": \"<dateTime>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/Books/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  ",
															"  pm.expect(responseData).to.have.property('id');",
															"  pm.expect(responseData).to.have.property('title');",
															"  pm.expect(responseData).to.have.property('description');",
															"  pm.expect(responseData).to.have.property('pageCount');",
															"  pm.expect(responseData).to.have.property('excerpt');",
															"  pm.expect(responseData).to.have.property('publishDate');",
															"});",
															"",
															"",
															"pm.test(\"Id is a non-negative integer\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
															"});",
															"",
															"",
															"pm.test(\"Title is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Description is a non-empty string\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 1,\n    \"title\": \"Book 1\",\n    \"description\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\",\n    \"pageCount\": 100,\n    \"excerpt\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\",\n    \"publishDate\": \"2024-05-06T05:32:23.6757863+00:00\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Books/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Books",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; v=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"description\": \"<string>\",\n  \"pageCount\": \"<integer>\",\n  \"excerpt\": \"<string>\",\n  \"publishDate\": \"<dateTime>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/Books/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Books",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/api/v1/Books/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Books/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Books",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Books/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Books",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/api/v1/Books",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Id is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    responseData.forEach(function(book){",
													"        pm.expect(book.id).to.be.a('number').and.to.be.greaterThanOrEqual(0, \"Id should be a non-negative integer\");",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Title is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('array');",
													"  responseData.forEach(function(book) {",
													"    pm.expect(book.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"PageCount is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    responseData.forEach(function(book) {",
													"        pm.expect(book.pageCount).to.be.a('number').and.to.be.at.least(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/Books",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Books"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Books",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Books"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"pageCount\": \"<integer>\",\n    \"excerpt\": \"<string>\",\n    \"publishDate\": \"<dateTime>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"pageCount\": \"<integer>\",\n    \"excerpt\": \"<string>\",\n    \"publishDate\": \"<dateTime>\"\n  }\n]"
										}
									]
								},
								{
									"name": "/api/v1/Books",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Id is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Title is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"PageCount is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.pageCount).to.be.a('number');",
													"    pm.expect(responseData.pageCount).to.be.at.least(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; v=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 1,\n    \"title\": \"Book 1\",\n    \"description\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\",\n    \"pageCount\": 100,\n    \"excerpt\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\",\n    \"publishDate\": \"2024-05-06T05:32:23.6757863+00:00\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/Books",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Books"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"description\": \"<string>\",\n  \"pageCount\": \"<integer>\",\n  \"excerpt\": \"<string>\",\n  \"publishDate\": \"<dateTime>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Books",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Books"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "CoverPhotos",
							"item": [
								{
									"name": "books",
									"item": [
										{
											"name": "covers",
											"item": [
												{
													"name": "{idBook}",
													"item": [
														{
															"name": "/api/v1/CoverPhotos/books/covers/:idBook",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Response status code is 200\", function () {",
																			"  pm.expect(pm.response.code).to.equal(200);",
																			"});",
																			"",
																			"",
																			"pm.test(\"Response has the required fields\", function () {",
																			"    const responseData = pm.response.json();",
																			"    ",
																			"    pm.expect(responseData).to.be.an('array');",
																			"    pm.expect(responseData).to.not.be.empty;",
																			"    ",
																			"    responseData.forEach(function(photo) {",
																			"        pm.expect(photo.id).to.exist;",
																			"        pm.expect(photo.idBook).to.exist;",
																			"        pm.expect(photo.url).to.exist;",
																			"    });",
																			"});",
																			"",
																			"",
																			"pm.test(\"Id is a non-negative integer\", function () {",
																			"  const responseData = pm.response.json();",
																			"  ",
																			"  pm.expect(responseData).to.be.an('array');",
																			"  ",
																			"  responseData.forEach(function(item) {",
																			"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
																			"  });",
																			"});",
																			"",
																			"",
																			"pm.test(\"idBook is a non-negative integer\", function () {",
																			"    const responseData = pm.response.json();",
																			"    ",
																			"    pm.expect(responseData).to.be.an('array');",
																			"    responseData.forEach(function (item) {",
																			"        pm.expect(item.idBook).to.be.a('number').and.to.be.greaterThan(-1);",
																			"    });",
																			"});",
																			"",
																			"",
																			"pm.test(\"URL is a non-empty string\", function () {",
																			"    const responseData = pm.response.json();",
																			"    ",
																			"    pm.expect(responseData).to.be.an('array');",
																			"    responseData.forEach(function (item) {",
																			"        pm.expect(item.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");",
																			"    });",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain; v=1.0"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/CoverPhotos/books/covers/:idBook",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"CoverPhotos",
																		"books",
																		"covers",
																		":idBook"
																	],
																	"variable": [
																		{
																			"key": "idBook",
																			"value": "1",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Success",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain; v=1.0"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v1/CoverPhotos/books/covers/:idBook",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v1",
																				"CoverPhotos",
																				"books",
																				"covers",
																				":idBook"
																			],
																			"variable": [
																				{
																					"key": "idBook"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; v=1.0"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"url\": \"<uri>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"url\": \"<uri>\"\n  }\n]"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "{id}",
									"item": [
										{
											"name": "/api/v1/CoverPhotos/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"})",
															"",
															"pm.test('Response has the required fields - id, idBook, and url', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('id');",
															"    pm.expect(responseData).to.have.property('idBook');",
															"    pm.expect(responseData).to.have.property('url');",
															"})",
															"",
															"pm.test('idBook is a non-negative integer', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.idBook).to.be.a('number');",
															"    pm.expect(responseData.idBook).to.be.at.least(0);",
															"})",
															"",
															"pm.test('The url is a non-empty string', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.url).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"CoverPhotos",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"CoverPhotos",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"url\": \"<uri>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/CoverPhotos/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test('Response has the required fields', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('id');",
															"    pm.expect(responseData).to.have.property('idBook');",
															"    pm.expect(responseData).to.have.property('url');",
															"})",
															"",
															"pm.test('Validate that \\'id\\' is a non-negative integer', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.id).to.be.a('number');",
															"    pm.expect(responseData.id).to.be.above(-1, '\\'id\\' should be a non-negative integer');",
															"})",
															"",
															"pm.test('Verify that the \\'url\\' is a non-empty string', function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.url).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 1,\n    \"idBook\": 1,\n    \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"CoverPhotos",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; v=1.0"
															},
															{
																"key": "Accept",
																"value": "text/plain; v=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"url\": \"<uri>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"CoverPhotos",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; v=1.0"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"url\": \"<uri>\"\n}"
												}
											]
										},
										{
											"name": "/api/v1/CoverPhotos/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"CoverPhotos",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/CoverPhotos/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"CoverPhotos",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/api/v1/CoverPhotos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response is in JSON format\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that the response is an array\", function () {",
													"  pm.expect(pm.response.json()).to.be.an('array');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the response array contains at least one element\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Validate fields 'id', 'idBook', and 'url' in the response\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.forEach(function(photo) {",
													"        pm.expect(photo).to.have.property('id').that.is.a('number');",
													"        pm.expect(photo).to.have.property('idBook').that.is.a('number');",
													"        pm.expect(photo).to.have.property('url').that.is.a('string');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/CoverPhotos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"CoverPhotos"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/CoverPhotos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"CoverPhotos"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"url\": \"<uri>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"idBook\": \"<integer>\",\n    \"url\": \"<uri>\"\n  }\n]"
										}
									]
								},
								{
									"name": "/api/v1/CoverPhotos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('idBook');",
													"    pm.expect(responseData).to.have.property('url');",
													"});",
													"",
													"",
													"pm.test(\"Check if id is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.id).to.be.a('number', \"id should be a number\");",
													"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");",
													"});",
													"",
													"",
													"pm.test(\"idBook is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.idBook).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"The 'url' should be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; v=1.0"
											},
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 1,\n        \"idBook\": 1,\n        \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"\n    }",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/CoverPhotos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"CoverPhotos"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													},
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"url\": \"<uri>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/CoverPhotos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"CoverPhotos"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"idBook\": \"<integer>\",\n  \"url\": \"<uri>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Users",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "/api/v1/Users/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
															"  pm.expect(responseData.userName).to.exist.and.to.be.a('string');",
															"  pm.expect(responseData.password).to.exist.and.to.be.a('string');",
															"});",
															"",
															"",
															"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"'id' should be a non-negative integer\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that userName is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.userName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});",
															"",
															"pm.test(\"Verify that password is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Validate the Content-Type header is 'application/json'\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Users/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/api/v1/Users/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
															"    pm.expect(responseData.userName).to.exist.and.to.be.a('string');",
															"    pm.expect(responseData.password).to.exist.and.to.be.a('string');",
															"});",
															"",
															"",
															"pm.test(\"The id is a non-negative integer\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
															"  pm.expect(responseData.id).to.be.at.least(0);",
															"});",
															"",
															"",
															"pm.test(\"Validate that the userName is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.userName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"The password should be a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"userName\": \"jhonDoe\",\n  \"password\": \"jhon@1234\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "0",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; v=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<integer>\",\n  \"userName\": \"<string>\",\n  \"password\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/Users/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/api/v1/Users/:id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Response status code is 200', function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "2",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Success",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v1/Users/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"Users",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/api/v1/Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - id, userName, and password\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    ",
													"    responseData.forEach(function(user) {",
													"        pm.expect(user).to.have.property('id');",
													"        pm.expect(user).to.have.property('userName');",
													"        pm.expect(user).to.have.property('password');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Username is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    responseData.forEach(function(user) {",
													"        pm.expect(user.userName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Password is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    ",
													"    responseData.forEach(function(user) {",
													"        pm.expect(user.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Response body is in a valid JSON format\", function () {",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain; v=1.0"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/Users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain; v=1.0"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/Users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; v=1.0"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "/api/v1/Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.userName).to.exist;",
													"    pm.expect(responseData.password).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"The 'id' must be a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number', \"Value should be a number\");",
													"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be non-negative\");",
													"});",
													"",
													"",
													"pm.test(\"The userName should be a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.userName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Validate that the 'password' is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; v=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 1,\n  \"userName\": \"jhonDoe\",\n  \"password\": \"jhon@1234\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/Users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"Users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; v=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"userName\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/Users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"Users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		}
	]
}
